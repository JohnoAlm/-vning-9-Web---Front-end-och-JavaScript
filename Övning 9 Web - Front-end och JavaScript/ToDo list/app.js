let myBodyId = document.querySelector("#myBodyId");
const colourChange = document.querySelector("#colour-change");
const inputItem = document.querySelector("#input-item");
const addItem = document.querySelector("#add-item");
const checkItem = document.querySelector("#check-item");


/* H√§r √§r en EventListener som vid klick av add-item knappen skapar f√∂rst ett
nytt element li eller itemListContent. Efter det skapar vi itemListText d√§r vi anv√§nder createTextNode
som skapar en text str√§ng fr√•n det specificerade v√§rdet, i v√•rt fall inputItem.value vilket √§r input
f√§ltets v√§rde. Detta passar perfekt till det vi vill g√∂ra. 

D√§refter tar vi itemListContent.appendChild f√∂r att l√§gga till v√•ran string till li-elementet.

Till sist skapar vi en ny variabel itemList som representerar listans skal. Vi tar i detta fall ut
v√•rat ul element med id:t item-list som vi deklarerade i index.html och l√§gger det i itemList variabeln.
Sedan s√• g√∂r vi √§nnu en appendChild fast den h√§r g√•ngen p√• itemList variablen och s√§tter v√•ran 
itemListContent p√• den allts√• li elementet s√• det blir som en helt vanlig lista

*/

const addItemListContent = function(){
                
    let itemListContent = document.createElement("li");
    itemListContent.setAttribute("class", "my-3 border rounded");

    if(inputItem.value === ""){
        return false;
    }

    let itemListText = document.createTextNode(inputItem.value.toString().toUpperCase());
    inputItem.value = "";
                
    itemListContent.appendChild(itemListText);
                
    return itemListContent
                
}

const addRemoveButton = function(){
    
    let itemListRemoveButton = document.createElement("input");
    itemListRemoveButton.setAttribute("class", "mx-3")
    itemListRemoveButton.setAttribute("type", "button");
    itemListRemoveButton.setAttribute("value", "Ta bort üû®")
    
    return itemListRemoveButton;
    
}

const addCheckButton = function(){
    
    let checkButton = document.createElement("input");
    checkButton.setAttribute("type", "button");
    checkButton.setAttribute("value", "Ink√∂pt ‚òê")
    checkButton.setAttribute("class", "mx-1")
    
    return checkButton;
    
}

const addUndoButton = function(){
    let undoButton = document.createElement("input");
    undoButton.setAttribute("type", "button");
    undoButton.setAttribute("value", "√Öngra ‚Ü©")
    undoButton.setAttribute("class", "mx-1")
    
    return undoButton;
}

    addItem.addEventListener("click", function(){
        
        let itemListContent = addItemListContent();

        if(itemListContent === false){
            return errorMessage();
        }
        
        let itemListRemoveButton = addRemoveButton();
        
        itemListContent.appendChild(itemListRemoveButton);
        
        let checkButton = addCheckButton();
        
        itemListContent.appendChild(checkButton);
        
        let undoButton = addUndoButton();
        
        itemListContent.appendChild(undoButton);
        
        // Remove Button
        itemListRemoveButton.addEventListener("click", function(){
            itemListContent.remove();
        });
        
        // Check Button
        checkButton.addEventListener("click", function(){
            itemListContent.setAttribute("class", "my-3 text-decoration-line-through border rounded");
            checkButton.setAttribute("value", "Ink√∂pt ‚òë");
        });
        
        // Undo Button
        undoButton.addEventListener("click", function(){
            itemListContent.setAttribute("class", "my-3 text-decoration-none border rounded");
            checkButton.setAttribute("value", "Ink√∂pt ‚òê");
        });

        
        let itemList = document.querySelector("#item-list");
        itemList.appendChild(itemListContent);
    });

    // H√§r l√§gger vi till ifall man trycker Enter s√• fungerar det som att klicka p√• "L√§gg till" knappen
    inputItem.addEventListener("keypress", function(event){
        if(event.key === "Enter"){
            event.preventDefault();

            addItem.click();
        }
    });

    /* Denna eventlistenern tillh√∂r en "knapp" eller en symbol uppe till h√∂ger p√• sidan.
    Eventet √§r ett klick s√• n√§r vi klickar p√• knappen s√• k√∂rs all funktionalitet. 
    
    Det vi g√∂r √§r att n√§r vi klickar p√• denna knapp s√• skapar vi f√∂rst en referens till v√•r body 
    med myBodyId. Sedan kallar vi p√• randomColor funktionen, s√§tter in min v√§rdet 1 och max v√§rdet 10. 
    Resultatet lagrar vi sedan i variabeln color. 
    
    D√§refter √§ndrar vi v√•ran bodys attribut genom class och s√§tter bakgrunden eller bg- + color allts√•
    bg plus den str√§ng som representerar bootstrap f√§rgerna. N√§r vi konkatenerar dessa tv√• str√§ngar 
    s√• blir resultatet tex bg-primary, bg-success, bg-danger, bg-warning, bg-info, bg-light osv.
    
    P√• s√• s√§tt √§ndrar vi bodyns bakgrund. Genom att helt enkelt √§ndra dess bootstrap class.*/

    colourChange.addEventListener("click", function(){
        let myBodyId = document.querySelector("#myBodyId");

        const color = randomColor(1, 10);

        myBodyId.setAttribute("class", "bg-" + color + " d-flex flex-column min-vh-100");
    });

    

    // H√§r skapar vi ett errorMessage
    const errorMessage = function(){
    
        alert("Du kan inte l√§gga till en vara som en tom str√§ng!");     
    }


    /*H√§r skapar vi en funktion randomColor som tar in ett min v√§rde och ett max v√§rde.
    Det denna funktionen g√∂r √§r att den genererar ett slumpat v√§rde fr√•n 1, 10 med colorSelector.
    Efter det s√• skapar vi variabeln color. Sedan l√§gger vi v√•r colorSelector i en switch med
    v√§rdena 1 till 10. Alla dessa inneh√•ller alla f√§rger som kommer med bootstrap i form av en str√§ng som vi sedan l√§gger
    i variablen color. Till sist returnerar vi denna str√§ng och anv√§nder den uppe vid en 
    event listener till en knapp (colourChange). ‚Üë */
    const randomColor = function(min, max){
    
    min = Math.ceil(min);
    max = Math.ceil(max);
    
    let colorSelector = Math.floor((Math.random() * (max - min) + min));
    let color;

    switch(colorSelector){
        
        case 1:
            color = "primary";
            break;
        case 2:
            color = "secondary";
            break;
        case 3:
            color = "success";
            break;
        case 4:
            color = "danger";
            break;
        case 5:
            color = "warning";
            break;
        case 6:
            color = "info";
            break;
        case 7:
            color = "light";
            break;
        case 8:
            color = "dark";
            break;
        case 9:
            color = "muted";
            break;
        case 10:
            color = "white";
            break;
        }

        return color;
                
}
    
    
    
    
    